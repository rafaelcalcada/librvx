<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="gpio_8h" kind="file" language="C++">
    <compoundname>gpio.h</compoundname>
    <includes refid="globals_8h" local="yes">globals.h</includes>
    <includedby refid="libsteel_8h" local="yes">include/libsteel.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>globals.h</label>
        <link refid="globals_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/gpio.h</label>
        <link refid="gpio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/libsteel.h</label>
        <link refid="libsteel_8h_source"/>
      </node>
      <node id="1">
        <label>include/gpio.h</label>
        <link refid="gpio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structGpioController" prot="public">GpioController</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="gpio_8h_1ad75f00371cfa17e3473d1794a32b7ab1" prot="public" static="no" strong="no">
        <type></type>
        <name>GpioLogicValue</name>
        <enumvalue id="gpio_8h_1ad75f00371cfa17e3473d1794a32b7ab1a6a226f4143ca3b18999551694cdb72a8" prot="public">
          <name>LOW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gpio_8h_1ad75f00371cfa17e3473d1794a32b7ab1a0c3a1dacf94061154b3ee354359c5893" prot="public">
          <name>HIGH</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="29" column="1" bodyfile="include/gpio.h" bodystart="30" bodyend="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gpio_8h_1a4c749331167def4b5f83697bb54c72ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_set_output</definition>
        <argsstring>(GpioController *gpio, const uint32_t pin_id)</argsstring>
        <name>gpio_set_output</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pin_id</declname>
        </param>
        <briefdescription>
<para>Set a GPIO pin to work as an output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the GPIO pin to set as an output. Note that IDs start at 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="43" column="13" bodyfile="include/gpio.h" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1ae53ee60512a9282cb2d436546f4271c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_set_input</definition>
        <argsstring>(GpioController *gpio, const uint32_t pin_id)</argsstring>
        <name>gpio_set_input</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pin_id</declname>
        </param>
        <briefdescription>
<para>Set a GPIO pin to work as an input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the GPIO pin to set as an input. Note that IDs start at 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="54" column="13" bodyfile="include/gpio.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1ab3a835a217de4cd74086e6be1748024f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t gpio_read</definition>
        <argsstring>(GpioController *gpio, const uint32_t pin_id)</argsstring>
        <name>gpio_read</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pin_id</declname>
        </param>
        <briefdescription>
<para>Return the current logic state of a GPIO pin, either 0 or 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the GPIO pin to read. Note that IDs start at 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="66" column="17" bodyfile="include/gpio.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a3072abc51ac0a4b83594dbaf424912bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_write</definition>
        <argsstring>(GpioController *gpio, const uint32_t pin_id, enum GpioLogicValue value)</argsstring>
        <name>gpio_write</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pin_id</declname>
        </param>
        <param>
          <type>enum GpioLogicValue</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the logic value for a GPIO pin. The value can be either LOW (0) or HIGH (1). An attempt to write to a pin set as input, or a value other than LOW or HIGH, is gracefully ignored (no errors are given). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the GPIO pin to write. Note that IDs start at 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Either LOW (0) or HIGH (1) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="80" column="13" bodyfile="include/gpio.h" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a222879db08d81445558a2ebae44a4045" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_set</definition>
        <argsstring>(GpioController *gpio, const uint32_t pin_id)</argsstring>
        <name>gpio_set</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pin_id</declname>
        </param>
        <briefdescription>
<para>Set the value of a GPIO pin to logic 1. An attempt to set a pin configured as input is gracefully ignored (no errors are given). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the GPIO pin to set. Note that IDs start at 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="95" column="13" bodyfile="include/gpio.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a819934f8935c9cad8410a54603002e33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_clear</definition>
        <argsstring>(GpioController *gpio, const uint32_t pin_id)</argsstring>
        <name>gpio_clear</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pin_id</declname>
        </param>
        <briefdescription>
<para>Set the value of a GPIO pin to logic 0. An attempt to clear a pin configured as input is gracefully ignored (no errors are given). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the GPIO pin to clear. Note that IDs start at 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="107" column="13" bodyfile="include/gpio.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a82d48f8b92b99e025ff0fe3c2728beff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_toggle</definition>
        <argsstring>(GpioController *gpio, const uint32_t pin_id)</argsstring>
        <name>gpio_toggle</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pin_id</declname>
        </param>
        <briefdescription>
<para>Toggle the value of a GPIO pin. An attempt to toggle a pin configured as input is gracefully ignored (no errors are given). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the GPIO pin to toggle. Note that IDs start at 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="119" column="13" bodyfile="include/gpio.h" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a1bbe7660ee0c924822e1d31f18e698e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gpio_is_set</definition>
        <argsstring>(GpioController *gpio, const uint32_t pin_id)</argsstring>
        <name>gpio_is_set</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pin_id</declname>
        </param>
        <briefdescription>
<para>Test whether a GPIO pin is logic HIGH (1). Both input and output pins can be tested. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_id</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="132" column="13" bodyfile="include/gpio.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1af5cfb694d6abd5b69d2cf6c39613e65c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gpio_is_clear</definition>
        <argsstring>(GpioController *gpio, const uint32_t pin_id)</argsstring>
        <name>gpio_is_clear</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>pin_id</declname>
        </param>
        <briefdescription>
<para>Test whether a GPIO pin is logic LOW (0). Both input and output pins can be tested. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_id</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="145" column="13" bodyfile="include/gpio.h" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a7abf8c062989387fe9d94f4554764ade" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_set_output_group</definition>
        <argsstring>(GpioController *gpio, const uint32_t bit_mask)</argsstring>
        <name>gpio_set_output_group</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bit_mask</declname>
        </param>
        <briefdescription>
<para>Set a group of GPIO pins to work as outputs at once. A bit mask is used to select the appropriate pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask indicating which GPIO pins to set as outputs. Example: 0b00010010 sets gpio[1] and gpio[4] as outputs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="158" column="13" bodyfile="include/gpio.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a3b9a756b0c564b34a888d5c46ec9f5cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_set_input_group</definition>
        <argsstring>(GpioController *gpio, const uint32_t bit_mask)</argsstring>
        <name>gpio_set_input_group</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bit_mask</declname>
        </param>
        <briefdescription>
<para>Set a group of GPIO pins to work as inputs at once. A bit mask is used to select the appropriate pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask indicating which GPIO pins to set as inputs. Example: 0b00001100 sets gpio[2] and gpio[3] as inputs. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="171" column="13" bodyfile="include/gpio.h" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a6178b3cab28825cc98b82ee3700d7951" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t gpio_read_all</definition>
        <argsstring>(GpioController *gpio)</argsstring>
        <name>gpio_read_all</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <briefdescription>
<para>Return a bit vector with the current logic state of all GPIO pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="182" column="17" bodyfile="include/gpio.h" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a36919bb474085f35249412a75ed9b881" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_write_group</definition>
        <argsstring>(GpioController *gpio, const uint32_t value_mask)</argsstring>
        <name>gpio_write_group</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>value_mask</declname>
        </param>
        <briefdescription>
<para>Set the logic values for a group of GPIO pins. The values for the output pins are set at once from the value mask provided. Pins set as inputs will hold their values and are not affected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask with the logic values for the GPIO pins. Example: 0b00010000 sets gpio[4] to 1 and all remaining pins to 0 (assuming GPIO pins 0 to 7 were previously set as outputs). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="197" column="13" bodyfile="include/gpio.h" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a500461b79b6723959cd0191d1ea46f27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_set_group</definition>
        <argsstring>(GpioController *gpio, const uint32_t bit_mask)</argsstring>
        <name>gpio_set_group</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bit_mask</declname>
        </param>
        <briefdescription>
<para>Set a group of GPIO pins to logic 1. The output pins are set to 1 at once and selected from the bit mask provided. Pins set as inputs will hold their values and are not affected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask indicating which GPIO pins must have their values set to logic 1. Example: 0b00010000 sets gpio[4] to 1, all remaining pins keep their current values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="210" column="13" bodyfile="include/gpio.h" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1a203c61a1bcf3b8c40fae2b288e770c81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_clear_group</definition>
        <argsstring>(GpioController *gpio, const uint32_t bit_mask)</argsstring>
        <name>gpio_clear_group</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bit_mask</declname>
        </param>
        <briefdescription>
<para>Set a group of GPIO pins to logic 0. The output pins are set to 0 at once and selected from the bit mask provided. Pins set as inputs will hold their values and are not affected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask indicating which GPIO pins must have their values set to logic 0. Example: 0b00010000 sets gpio[4] to 0, all remaining pins keep their current values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="223" column="13" bodyfile="include/gpio.h" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="gpio_8h_1adb17c6db2ad22c19862106614a2dc523" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gpio_toggle_group</definition>
        <argsstring>(GpioController *gpio, const uint32_t bit_mask)</argsstring>
        <name>gpio_toggle_group</name>
        <param>
          <type><ref refid="structGpioController" kindref="compound">GpioController</ref> *</type>
          <declname>gpio</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>bit_mask</declname>
        </param>
        <briefdescription>
<para>Toggle the value of a group of GPIO pins. The output pins are toggled at once and selected from the bit mask provided. Pins set as inputs will hold their values and are not affected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gpio</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structGpioController" kindref="compound">GpioController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bit_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>A bit mask indicating which GPIO pins must have their values toggled. Example: 0b00010000 toggles gpio[4] from 0-&gt;1 or 1-&gt;0, depending on its current value. All remaining pins keep their current values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/gpio.h" line="237" column="13" bodyfile="include/gpio.h" bodystart="237" bodyend="240"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2020-2024<sp/>RISC-V<sp/>Steel<sp/>contributors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>work<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>License,<sp/>see<sp/>LICENSE<sp/>file<sp/>for<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__LIBSTEEL_GPIO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__LIBSTEEL_GPIO__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;globals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Struct<sp/>providing<sp/>access<sp/>to<sp/>RISC-V<sp/>Steel<sp/>GPIO<sp/>Device<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structGpioController" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IN<sp/>(Input)<sp/>Register.<sp/>Address<sp/>offset:<sp/>0x00.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>IN;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>OE<sp/>(Output<sp/>Enable)<sp/>Register.<sp/>Address<sp/>offset:<sp/>0x04.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>OE;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>OUT<sp/>(Output)<sp/>Register.<sp/>Address<sp/>offset:<sp/>0x08.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>OUT;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>CLR<sp/>(Clear)<sp/>Register.<sp/>Address<sp/>offset:<sp/>0x0c.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>CLR;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SET<sp/>(Set)<sp/>Register.<sp/>Address<sp/>offset:<sp/>0x10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>SET;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}<sp/><ref refid="structGpioController" kindref="compound">GpioController</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumeration<sp/>with<sp/>the<sp/>possible<sp/>logic<sp/>values<sp/>of<sp/>a<sp/>GPIO<sp/>pin<sp/>(`LOW`<sp/>or<sp/>`HIGH`)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>GpioLogicValue</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Logic<sp/>`LOW`<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>LOW<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Logic<sp/>`HIGH`<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>HIGH<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_set_output(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pin_id)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>SET_BIT(gpio-&gt;OE,<sp/>pin_id);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_set_input(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pin_id)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>CLR_BIT(gpio-&gt;OE,<sp/>pin_id);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>gpio_read(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pin_id)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READ_BIT(gpio-&gt;IN,<sp/>pin_id);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_write(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pin_id,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>GpioLogicValue<sp/>value)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>LOW)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio-&gt;CLR<sp/>=<sp/>0x1U<sp/>&lt;&lt;<sp/>pin_id;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>HIGH)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio-&gt;SET<sp/>=<sp/>0x1U<sp/>&lt;&lt;<sp/>pin_id;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_set(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pin_id)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>gpio-&gt;SET<sp/>=<sp/>0x1U<sp/>&lt;&lt;<sp/>pin_id;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_clear(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pin_id)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>gpio-&gt;CLR<sp/>=<sp/>0x1U<sp/>&lt;&lt;<sp/>pin_id;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_toggle(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pin_id)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>INV_BIT(gpio-&gt;OUT,<sp/>pin_id);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gpio_is_set(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pin_id)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READ_BIT(gpio-&gt;IN,<sp/>pin_id)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>gpio_is_clear(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>pin_id)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>READ_BIT(gpio-&gt;IN,<sp/>pin_id)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_set_output_group(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bit_mask)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>SET_FLAG(gpio-&gt;OE,<sp/>bit_mask);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_set_input_group(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bit_mask)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>CLR_FLAG(gpio-&gt;OE,<sp/>bit_mask);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>gpio_read_all(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gpio-&gt;IN;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_write_group(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>value_mask)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>gpio-&gt;OUT<sp/>=<sp/>value_mask;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_set_group(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bit_mask)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>gpio-&gt;SET<sp/>=<sp/>bit_mask;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_clear_group(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bit_mask)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>gpio-&gt;CLR<sp/>=<sp/>bit_mask;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gpio_toggle_group(<ref refid="structGpioController" kindref="compound">GpioController</ref><sp/>*gpio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>bit_mask)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>INV_FLAG(gpio-&gt;OUT,<sp/>bit_mask);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__LIBSTEEL_GPIO__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/gpio.h"/>
  </compounddef>
</doxygen>
