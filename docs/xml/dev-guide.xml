<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dev-guide" kind="page">
    <compoundname>dev-guide</compoundname>
    <title>Developer Guide</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="dev-guide_1devintro">
<title>Introduction</title>
<para>This developer guide will show you how to use LibSteel to start a new software project for RISC-V Steel.</para>
<para>Before you start, make sure you have the <ulink url="https://github.com/riscv/riscv-gnu-toolchain">RISC-V GNU Toolchain</ulink> installed on your machine. The RISC-V GNU Toolchain is a suite of compilers and software development tools for the RISC-V architecture, and is needed to build LibSteel and the examples in this guide.</para>
<para>Follow the steps below to download, install and configure the RISC-V GNU Toolchain for RISC-V Steel:</para>
<sect3 id="dev-guide_1autotoc_md0">
<title>1. Clone the RISC-V GNU Toolchain repository</title>
<para><verbatim>git clone https://github.com/riscv-collab/riscv-gnu-toolchain
</verbatim> </para>
</sect3>
<sect3 id="dev-guide_1autotoc_md1">
<title>2. Install dependencies</title>
<para><verbatim># Ubuntu
$ sudo apt-get install autoconf automake autotools-dev curl python3 python3-pip libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev ninja-build git cmake libglib2.0-dev libslirp-dev

# Fedora/CentOS/RHEL
$ sudo yum install autoconf automake python3 libmpc-devel mpfr-devel gmp-devel gawk  bison flex texinfo patchutils gcc gcc-c++ zlib-devel expat-devel libslirp-devel

# Arch Linux
$ sudo pacman -Syyu autoconf automake curl python3 libmpc mpfr gmp gawk base-devel bison flex texinfo gperf libtool patchutils bc zlib expat libslirp

# OS X
$ brew install python3 gawk gnu-sed gmp mpfr libmpc isl zlib expat texinfo flock libslirp
</verbatim> </para>
</sect3>
<sect3 id="dev-guide_1autotoc_md2">
<title>3. Configure the toolchain for RISC-V Steel</title>
<para><verbatim>cd riscv-gnu-toolchain
./configure --with-arch=rv32izicsr --with-abi=ilp32 --prefix=/opt/riscv
</verbatim> </para>
</sect3>
<sect3 id="dev-guide_1autotoc_md3">
<title>4. Compile and install the toolchain</title>
<para><verbatim>make -j $(nproc)
</verbatim> </para>
</sect3>
</sect1>
<sect1 id="dev-guide_1newproject">
<title>Start from the examples</title>
<para>The easiest way to get started is to copy one of the examples in the <computeroutput>examples/</computeroutput> folder of RISC-V Steel repository. You can, of course, start a new project from scratch, but then you would have to dive into the complex RISC-V GCC compiler and linker options. To save time, we recommend that you start with one of the examples and then edit the project settings.</para>
<para>To illustrate how to get started from the examples we chose the Hello World example. Start by making a copy of it: <verbatim># Clone RISC-V Steel repository (if not cloned yet)
$ git clone https://github.com/riscv-steel/riscv-steel

# Make copy of the Hello World project (here called &quot;new_project&quot;)
$ cp riscv-steel/examples/hello_world/software/ new_project/
</verbatim> The Hello World example uses CMake as its build system and contains:</para>
<para><itemizedlist>
<listitem><para>a Hello World program, <computeroutput>main.c</computeroutput></para>
</listitem><listitem><para>a linker script for RISC-V Steel</para>
</listitem><listitem><para>a Makefile to automate building tasks</para>
</listitem><listitem><para>a <computeroutput>CMakeLists.txt</computeroutput> file with build instructions for CMake</para>
</listitem></itemizedlist>
</para>
<para>Before making any changes, try building the project: <verbatim>$ cd new_project
$ make
</verbatim> A successfull build ends with a message like this:</para>
<para><programlisting><codeline><highlight class="normal">Memory<sp/>region<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Used<sp/>Size<sp/><sp/>Region<sp/>Size<sp/><sp/>%age<sp/>Used</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RAM:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1264<sp/>B<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8<sp/>KB<sp/><sp/><sp/><sp/><sp/>15.43%</highlight></codeline>
<codeline><highlight class="normal">-------------------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">Build<sp/>outputs:</highlight></codeline>
<codeline><highlight class="normal">--<sp/>ELF<sp/>executable:<sp/><sp/><sp/><sp/>build/hello_world.elf</highlight></codeline>
<codeline><highlight class="normal">--<sp/>Memory<sp/>init<sp/>file:<sp/><sp/>build/hello_world.hex</highlight></codeline>
<codeline><highlight class="normal">--<sp/>Disassembly:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>build/hello_world.objdump</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="dev-guide_1edit-settings">
<title>Edit the project settings</title>
<para>Now that you&apos;re sure your copy of the project compiles, change the project settings by editing <computeroutput>CMakeLists.txt</computeroutput>. A quick summary of the variables you can change is shown below. <linebreak/>
</para>
<para><table rows="6" cols="2"><row>
<entry thead="yes"><para>Variable   </para>
</entry><entry thead="yes"><para>Description    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>APP_NAME</computeroutput>   </para>
</entry><entry thead="no"><para>The name of the executable to be generated.    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>SOURCES</computeroutput>   </para>
</entry><entry thead="no"><para>A list with the source files of your application.    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>STACK_SIZE</computeroutput>   </para>
</entry><entry thead="no"><para>Size of the stack section, a memory region that will be left empty for stack growth.    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>HEAP_SIZE</computeroutput>   </para>
</entry><entry thead="no"><para>Size of the heap section, a memory region that will be left empty for heap growth.    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>MEMORY_SIZE</computeroutput>   </para>
</entry><entry thead="no"><para>Maximum allowed program size so that it fits into RISC-V Steel memory. If the program exceeds MEMORY_SIZE, the linker will print error messages and the project will not build.   </para>
</entry></row>
</table>
</para>
</sect1>
<sect1 id="dev-guide_1write-app">
<title>Write your application</title>
<para>Once the project is configured you can start writing your application. The start point of your app is the <computeroutput>main</computeroutput> function in <computeroutput>main.c</computeroutput>.</para>
<para>You can add new source files to the project by editing the <computeroutput>SOURCES</computeroutput> variable in <computeroutput>CMakeLists.txt</computeroutput>.</para>
</sect1>
<sect1 id="dev-guide_1build-and-run">
<title>Build and run</title>
<para>To build your application, simply run <computeroutput>make</computeroutput> from the project root folder again: <verbatim>$ make
</verbatim> The build process will generate a <computeroutput>.hex</computeroutput> file that you can use to initialize RISC-V Steel memory. This file will be saved in the <computeroutput>build/</computeroutput> folder.</para>
<para>To run the application you need to implement RISC-V Steel microcontroller on your FPGA. Before generating the bitstream, change the <computeroutput>MEMORY_INIT_FILE</computeroutput> paramater of the instance of <computeroutput>rvsteel_mcu</computeroutput> to the absolute path of the <computeroutput>.hex</computeroutput> file. This will embed your application in the FPGA bitstream used to initialize RISC-V Steel memory.</para>
<para>Check the <ulink url="https://riscv-steel.github.io/riscv-steel/gettingstarted/">Getting Started Guide</ulink> for a full guide on how to implement RISC-V Steel on your FPGA. </para>
</sect1>
    </detaileddescription>
    <location file="docs/pages/devguide.dox"/>
  </compounddef>
</doxygen>
