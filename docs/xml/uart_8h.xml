<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="uart_8h" kind="file" language="C++">
    <compoundname>uart.h</compoundname>
    <includes refid="globals_8h" local="yes">globals.h</includes>
    <includedby refid="libsteel_8h" local="yes">include/libsteel.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="1">
        <label>include/uart.h</label>
        <link refid="uart_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>globals.h</label>
        <link refid="globals_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/uart.h</label>
        <link refid="uart_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/libsteel.h</label>
        <link refid="libsteel_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structUartController" prot="public">UartController</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="uart_8h_1ad8597b227d59dace498563bc6a3f8f7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool uart_ready</definition>
        <argsstring>(UartController *uart)</argsstring>
        <name>uart_ready</name>
        <param>
          <type><ref refid="structUartController" kindref="compound">UartController</ref> *</type>
          <declname>uart</declname>
        </param>
        <briefdescription>
<para>Read register READY from the UART device. Return true if the device is ready to send data, false otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structUartController" kindref="compound">UartController</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/uart.h" line="32" column="13" bodyfile="include/uart.h" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="uart_8h_1a95ce0e8b6f554d0ffc5bfe671b01bdf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t uart_read</definition>
        <argsstring>(UartController *uart)</argsstring>
        <name>uart_read</name>
        <param>
          <type><ref refid="structUartController" kindref="compound">UartController</ref> *</type>
          <declname>uart</declname>
        </param>
        <briefdescription>
<para>Read register RDATA of the UART device. The UART requests an interrupt when it completes receiving new data. The new data can be read by calling this function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structUartController" kindref="compound">UartController</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/uart.h" line="44" column="16" bodyfile="include/uart.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="uart_8h_1a99e3e1e382e6a02286f20ea4c2eae5c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void uart_write</definition>
        <argsstring>(UartController *uart, uint8_t data)</argsstring>
        <name>uart_write</name>
        <param>
          <type><ref refid="structUartController" kindref="compound">UartController</ref> *</type>
          <declname>uart</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write a single byte to register WDATA of the UART device. It awaits the UART to be ready before writing to the register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structUartController" kindref="compound">UartController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A byte as uint8_t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/uart.h" line="56" column="13" bodyfile="include/uart.h" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="uart_8h_1a6318e1351193ba956cb7e7cee46fa9cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void uart_write_string</definition>
        <argsstring>(UartController *uart, const char *str)</argsstring>
        <name>uart_write_string</name>
        <param>
          <type><ref refid="structUartController" kindref="compound">UartController</ref> *</type>
          <declname>uart</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Send a C-string over the UART device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="structUartController" kindref="compound">UartController</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>A null-terminated C-string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/uart.h" line="69" column="13" bodyfile="include/uart.h" bodystart="69" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2020-2024<sp/>RISC-V<sp/>Steel<sp/>contributors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>work<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>License,<sp/>see<sp/>LICENSE<sp/>file<sp/>for<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__LIBSTEEL_UART__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__LIBSTEEL_UART__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;globals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Struct<sp/>providing<sp/>access<sp/>to<sp/>RISC-V<sp/>Steel<sp/>UART<sp/>Device<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structUartController" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>Data<sp/>(WDATA)<sp/>Register.<sp/>Address<sp/>offset:<sp/>0x00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>WDATA;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>Data<sp/>(RDATA)<sp/>Register.<sp/>Address<sp/>offset:<sp/>0x04</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>RDATA;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ready<sp/>(READY)<sp/>Register.<sp/>Address<sp/>offset:<sp/>0x08</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>READY;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}<sp/><ref refid="structUartController" kindref="compound">UartController</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uart_ready(<ref refid="structUartController" kindref="compound">UartController</ref><sp/>*uart)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uart-&gt;READY<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/>uart_read(<ref refid="structUartController" kindref="compound">UartController</ref><sp/>*uart)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uart-&gt;RDATA;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>uart_write(<ref refid="structUartController" kindref="compound">UartController</ref><sp/>*uart,<sp/>uint8_t<sp/>data)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!uart_ready(uart))</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>uart-&gt;WDATA<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>uart_write_string(<ref refid="structUartController" kindref="compound">UartController</ref><sp/>*uart,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*(str)<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>uart_write(uart,<sp/>*(str));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>str++;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__LIBSTEEL_UART__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/uart.h"/>
  </compounddef>
</doxygen>
